{"version":3,"sources":["Fruit/Fruit.js","App.js","registerServiceWorker.js","index.js"],"names":["fruit","props","react_default","a","createElement","name","quantity","onClick","click","App","state","fruits","deleteFruitHandler","fruitIndex","Object","toConsumableArray","_this","splice","setState","handleSubmit","event","preventDefault","fruitName","target","value","concat","addFruitsHandler","split","parseInt","_this2","this","showFruits","map","index","Fruit_Fruit","className","onFormSubmit","type","onChange","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.71345ba0.chunk.js","sourcesContent":["import React from 'react';\nimport './Fruit.css'\n\n//presentational component\nconst fruit = (props) => {\n    return(\n        <div>\n            <table>\n                {/* <thead>\n                <tr>\n                    <th>Fruit</th>\n                    <th>Quantity</th>\n                    <th>Option</th>\n                </tr>\n                </thead> */}\n                <tbody>\n                <tr>\n                    <td>{props.name}</td>\n                    <td>{props.quantity}</td>\n                    <td><button onClick={props.click}>Delete</button></td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n\n};\n\nexport default fruit;","import React, { Component } from 'react';\nimport './App.css';\nimport Fruit from './Fruit/Fruit'\n\n\nclass App extends Component {\n  state = {\n    fruits : []\n  }\n\n  deleteFruitHandler = (fruitIndex) => {\n    const fruits = [...this.state.fruits];\n    fruits.splice(fruitIndex,1);\n    this.setState({fruits:fruits})\n  }\n\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const fruitName = event.target.value;\n    const fruits = [...this.state.fruits, fruitName];\n    this.setState({fruits : fruits})                                                                                                                                                                                             \n  }\n\n\n  addFruitsHandler = (event) => {\n    let input= event.target.value;\n    let fruit= input.split(\"-\"); \n    this.setState({name :fruit[0], quantity:parseInt(fruit[1])});\n  }\n\n\n  render() {\n    let showFruits = (\n      <div>\n      {this.state.fruits.map((fruit,index)=>{\n          return <Fruit\n                  click={() => this.deleteFruitHandler(index)}\n                  // key = {fruit.id}\n                  name = {fruit.name}\n                  quantity = {fruit.quantity}\n                  />\n      })}\n    </div>\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Fruit List</h1>\n        <form onFormSubmit={this.handleSubmit}>\n          <h4>Enter the Fruit name and Quantity: </h4>\n            <input type=\"text\" \n                  name='name' \n                  value={this.state.name}\n                  onChange={this.addFruitsHandler}>\n            </input>\n          <br></br><br></br>\n          <input type=\"submit\">Submit!</input>\n        </form> \n        <br></br><br></br>\n        {showFruits}     \n      </div> \n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}